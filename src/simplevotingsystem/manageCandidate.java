/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simplevotingsystem;

import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableModel;

/**
 *
 * @author DELL
 */
public class manageCandidate extends javax.swing.JFrame {
    Connection con=null;
    Statement stm=null;
    ResultSet rs=null;
    PreparedStatement ps=null;
    String imagePath=null;
    String username;

    /**
     * Creates new form manageCandidate
     */
    public manageCandidate() {
        initComponents();
        setLocationRelativeTo(null);
        // con=ConnectionToDatabase.conn();
         con=creatConnection.conn();
        // populateJTableforPresident();
    }
    
    int pos=0;
    
    //Function to Resize Image to fit into Jlabel 
    public ImageIcon ResizeImage(String imagePath,byte[] pic){
    ImageIcon myImage = null;
     if(imagePath!=null){
      myImage=new ImageIcon(imagePath);
     }
     else{
     myImage=new ImageIcon(pic);
     }
     
     Image img1 = myImage.getImage();
     Image img2 = img1.getScaledInstance(labelPicture.getWidth(),labelPicture.getHeight(),Image.SCALE_SMOOTH);
     ImageIcon image =new ImageIcon(img2);
     return image;
    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labelPicture = new javax.swing.JLabel();
        buttonChoose = new javax.swing.JButton();
        textCandidateID = new javax.swing.JTextField();
        textFirstName = new javax.swing.JTextField();
        textLastName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "MANAGE CANDIDATE", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 36))); // NOI18N

        labelPicture.setBackground(new java.awt.Color(255, 255, 255));
        labelPicture.setOpaque(true);

        buttonChoose.setForeground(new java.awt.Color(0, 0, 204));
        buttonChoose.setText("CHOOSE");
        buttonChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonChooseActionPerformed(evt);
            }
        });

        textCandidateID.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        textFirstName.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        textLastName.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("ID");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("FirstName");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("LastName");

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("CLEAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setText("DELETE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setText("SAVE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton5.setText("UPDATE");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(19, 19, 19))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        jTable1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setText("Position");

        jComboBox1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT...", "PRESIDENT", "FINANCIAL", "SECERTARY", "ORGANIZER", "WOMAN COMMISSION", "TREASURE", "WELFARE" }));

        jComboBox2.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select...", "PRESIDENT", "FINANCIAL", "SECERTARY", "ORGANIZER", "WOMAN COMMISSION", "TREASURE", "WELFARE" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 51, 51));
        jLabel6.setText("*Picture Size (less than 1mb)");

        btnBack.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textFirstName)
                            .addComponent(textCandidateID, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textLastName)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(buttonChoose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                                .addComponent(jLabel6)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(textCandidateID, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(29, 29, 29)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(textFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(textLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(35, 35, 35)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(labelPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6)))
                        .addGap(41, 41, 41)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChooseActionPerformed
        ///Selecting images
        try{
            JFileChooser file = new JFileChooser();
            file.setCurrentDirectory(new File(System.getProperty("user.home")));

            FileNameExtensionFilter filter = new FileNameExtensionFilter("*.images","jpg","png");

            file.addChoosableFileFilter(filter);
            int result =file.showSaveDialog(null);
            if(result==JFileChooser.APPROVE_OPTION){
                File selectedFile=file.getSelectedFile();
                String path=selectedFile.getAbsolutePath();
                labelPicture.setIcon(ResizeImage(path,null));
                imagePath=path;
            }
            else{
                JOptionPane.showMessageDialog(null, "No file");
            }
        }
        catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Error!");

        }
    }//GEN-LAST:event_buttonChooseActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
int position= jComboBox1.getSelectedIndex();
 int p = JOptionPane.showConfirmDialog(null, "Are you really Sure you  want to Save  this Person?","Confirm",JOptionPane.YES_NO_OPTION);
        if(p==0){
           try{
            if(textCandidateID.getText()==null || textFirstName.getText()==null || textLastName.getText()==null){
                JOptionPane.showMessageDialog(null, "One or More Fields is empty");
            }
            else{
             
                 switch (position) {
                     case 0:
                         JOptionPane.showMessageDialog(null,"Choose a position Please");
                         break;
                     case 1:
                         {
                             ps=con.prepareStatement("INSERT INTO presidentcandidate (ID,FIRSTNAME,LASTNAME,IMAGE) values(?,?,?,?)");
                             ps.setString(1, textCandidateID.getText().trim().toUpperCase());
                             ps.setString(2, textFirstName.getText());
                             ps.setString(3, textLastName.getText());
                             InputStream img;
                             img = new FileInputStream(new File(imagePath));
                             ps.setBlob(4,img);
                             ps.execute();
                             ps=con.prepareStatement("INSERT INTO presidentvoting (ID,VOTES) values(?,'0')");
                             ps.setString(1, textCandidateID.getText().trim().toUpperCase());
                             ps.execute();
                             JOptionPane.showMessageDialog(null,"Data is saved successfully");
                             clear();
                             populateJTableforPresident();
                             jComboBox2.setSelectedIndex(1);
                             break;
                         }
                     case 2:
                         {
                             ps=con.prepareStatement("INSERT INTO financialcandidate (ID,FIRSTNAME,LASTNAME,IMAGE) values(?,?,?,?)");
                             ps.setString(1, textCandidateID.getText().trim().toUpperCase());
                             ps.setString(2, textFirstName.getText());
                             ps.setString(3, textLastName.getText());
                             InputStream img;
                             img = new FileInputStream(new File(imagePath));
                             ps.setBlob(4,img);
                             ps.execute();
                             ps=con.prepareStatement("INSERT INTO financialvoting (ID,VOTES) values(?,'0')");
                             ps.setString(1, textCandidateID.getText().trim().toUpperCase());
                             ps.execute();
                             JOptionPane.showMessageDialog(null,"Data is saved successfully");
                             clear();
                              populateJTableFinancial();
                              jComboBox2.setSelectedIndex(2);
                             break;
                         }
                     case 3:
                         {
                             ps=con.prepareStatement("INSERT INTO secertarycandidate (ID,FIRSTNAME,LASTNAME,IMAGE) values(?,?,?,?)");
                             ps.setString(1, textCandidateID.getText().trim().toUpperCase());
                             ps.setString(2, textFirstName.getText());
                             ps.setString(3, textLastName.getText());
                             InputStream img;
                             img = new FileInputStream(new File(imagePath));
                             ps.setBlob(4,img);
                             ps.execute();
                             ps=con.prepareStatement("INSERT INTO secertaryvoting (ID,VOTES) values(?,'0')");
                             ps.setString(1, textCandidateID.getText().trim().toUpperCase());
                             ps.execute();
                             JOptionPane.showMessageDialog(null,"Data is saved successfully");
                             clear();
                              populateJTableSecertary();
                              jComboBox2.setSelectedIndex(3);
                             break;
                         }
                     case 4:
                         {
                             ps=con.prepareStatement("INSERT INTO organizercandidate (ID,FIRSTNAME,LASTNAME,IMAGE) values(?,?,?,?)");
                             ps.setString(1, textCandidateID.getText().trim().toUpperCase());
                             ps.setString(2, textFirstName.getText());
                             ps.setString(3, textLastName.getText());
                             InputStream img;
                             img = new FileInputStream(new File(imagePath));
                             ps.setBlob(4,img);
                             ps.execute();
                             ps=con.prepareStatement("INSERT INTO organizervoting (ID,VOTES) values(?,'0')");
                             ps.setString(1, textCandidateID.getText().trim().toUpperCase());
                             ps.execute();
                             JOptionPane.showMessageDialog(null,"Data is saved successfully");
                             clear();
                             populateJTableOrganizer();
                             jComboBox2.setSelectedIndex(4);
                             break;
                         }
                     case 5:
                         {
                             ps=con.prepareStatement("INSERT INTO wucomcandidate (ID,FIRSTNAME,LASTNAME,IMAGE) values(?,?,?,?)");
                             ps.setString(1, textCandidateID.getText().trim().toUpperCase());
                             ps.setString(2, textFirstName.getText());
                             ps.setString(3, textLastName.getText());
                             InputStream img;
                             img = new FileInputStream(new File(imagePath));
                             ps.setBlob(4,img);
                             ps.execute();
                             ps=con.prepareStatement("INSERT INTO wucomvoting (ID,VOTES) values(?,'0')");
                             ps.setString(1, textCandidateID.getText().trim().toUpperCase());
                             ps.execute();
                             JOptionPane.showMessageDialog(null,"Data is saved successfully");
                             clear();
                             populateJTableWucom();
                             jComboBox2.setSelectedIndex(5);
                             break;
                         }
                         case 6:
                         {
                             ps=con.prepareStatement("INSERT INTO treasurecandidate (ID,FIRSTNAME,LASTNAME,IMAGE) values(?,?,?,?)");
                             ps.setString(1, textCandidateID.getText().trim().toUpperCase());
                             ps.setString(2, textFirstName.getText());
                             ps.setString(3, textLastName.getText());
                             InputStream img;
                             img = new FileInputStream(new File(imagePath));
                             ps.setBlob(4,img);
                             ps.execute();
                             ps=con.prepareStatement("INSERT INTO treasurevoting (ID,VOTES) values(?,'0')");
                             ps.setString(1, textCandidateID.getText().trim().toUpperCase());
                             ps.execute();
                             JOptionPane.showMessageDialog(null,"Data is saved successfully");
                             clear();
                             populateJTableTreasure();
                             jComboBox2.setSelectedIndex(6);
                             break;
                         }
                           case 7:
                         {
                             ps=con.prepareStatement("INSERT INTO welfarecandidate (ID,FIRSTNAME,LASTNAME,IMAGE) values(?,?,?,?)");
                             ps.setString(1, textCandidateID.getText().trim().toUpperCase());
                             ps.setString(2, textFirstName.getText());
                             ps.setString(3, textLastName.getText());
                             InputStream img;
                             img = new FileInputStream(new File(imagePath));
                             ps.setBlob(4,img);
                             ps.execute();
                             ps=con.prepareStatement("INSERT INTO welfarevoting (ID,VOTES) values(?,'0')");
                             ps.setString(1, textCandidateID.getText().trim().toUpperCase());
                             ps.execute();
                             JOptionPane.showMessageDialog(null,"Data is saved successfully");
                             clear();
                             populateJTableTreasure();
                             jComboBox2.setSelectedIndex(6);
                             break;
                         }
                     default:
                         break;
                 }
            }
            
        
        }
           catch(Exception e){
                JOptionPane.showMessageDialog(null,e.getMessage());


            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
String id=textCandidateID.getText().trim().toUpperCase();
int index=jComboBox1.getSelectedIndex();
            
        int p = JOptionPane.showConfirmDialog(null, "You can't Change it, Are you sure you want to DELETE this person? Confirm and Proceed ","",JOptionPane.YES_NO_OPTION);
        if(p==0){
        try{
            
            if(index==0){
                JOptionPane.showMessageDialog(null,"Error!");
            
            }else if(index==1){
                //President
                String sql="DELETE FROM presidentcandidate where ID=?";
                ps=con.prepareStatement(sql);
                ps.setString(1, id);
                ps.execute();
                
                String sql3="DELETE FROM presidentvoting where ID=?";
                ps=con.prepareStatement(sql3);
                ps.setString(1, id);
                ps.execute();
                JOptionPane.showMessageDialog(null, "Record Deleted");
                clear();
                populateJTableforPresident();
            }else if(index==2){
                //President
                String sql="DELETE FROM financialcandidate where ID=?";
                ps=con.prepareStatement(sql);
                ps.setString(1, id);
                ps.execute();
                
                String sql3="DELETE FROM financialvoting where ID=?";
                ps=con.prepareStatement(sql3);
                ps.setString(1, id);
                ps.execute();
                JOptionPane.showMessageDialog(null, "Record Deleted");
                clear();
                populateJTableFinancial();
            }else if(index==3){
                //President
                String sql="DELETE FROM secertarycandidate where ID=?";
                ps=con.prepareStatement(sql);
                ps.setString(1, id);
                ps.execute();
                
                String sql3="DELETE FROM secertaryvoting where ID=?";
                ps=con.prepareStatement(sql3);
                ps.setString(1, id);
                ps.execute();
                JOptionPane.showMessageDialog(null, "Record Deleted");
                clear();
                populateJTableSecertary();
            }else if(index==4){
                //President
                String sql="DELETE FROM organizercandidate where ID=?";
                ps=con.prepareStatement(sql);
                ps.setString(1, id);
                ps.execute();
                
                String sql3="DELETE FROM organizervoting where ID=?";
                ps=con.prepareStatement(sql3);
                ps.setString(1, id);
                ps.execute();
                JOptionPane.showMessageDialog(null, "Record Deleted");
                clear();
                populateJTableOrganizer();
            }else if(index==5){
                //President
                String sql="DELETE FROM wucomcandidate where ID=?";
                ps=con.prepareStatement(sql);
                ps.setString(1, id);
                ps.execute();
                
                String sql3="DELETE FROM wucomvoting where ID=?";
                ps=con.prepareStatement(sql3);
                ps.setString(1, id);
                ps.execute();
                JOptionPane.showMessageDialog(null, "Record Deleted");
                clear();
                populateJTableWucom();
            }else if(index==6){
                //President
                String sql="DELETE FROM treasurecandidate where ID=?";
                ps=con.prepareStatement(sql);
                ps.setString(1, id);
                ps.execute();
                
                String sql3="DELETE FROM treasurevoting where ID=?";
                ps=con.prepareStatement(sql3);
                ps.setString(1, id);
                ps.execute();
                JOptionPane.showMessageDialog(null, "Record Deleted");
                clear();
                populateJTableTreasure();
            }else if(index==7){
                //Welfare
                String sql="DELETE FROM welfarecandidate where ID=?";
                ps=con.prepareStatement(sql);
                ps.setString(1, id);
                ps.execute();
                
                String sql3="DELETE FROM welfarevoting where ID=?";
                ps=con.prepareStatement(sql3);
                ps.setString(1, id);
                ps.execute();
                JOptionPane.showMessageDialog(null, "Record Deleted");
                clear();
                populateJTableWelfare();
            }
        
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
int hold=jComboBox2.getSelectedIndex();
if(hold==0){
}else if(hold==1){
        populateJTableforPresident();
}
else if(hold==2){
         populateJTableFinancial();
}
else if(hold==3){
        populateJTableSecertary();
}
else if(hold==4){
        populateJTableOrganizer();
}
else if(hold==5){
       populateJTableWucom();
}
else if(hold==6){
    populateJTableTreasure();
}else {
    populateJTableWelfare();
}
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
int hold=jComboBox2.getSelectedIndex();
 int index=jTable1.getSelectedRow();
 TableModel model=jTable1.getModel(); 
//getting row selected 
 int selectedRow = jTable1.getSelectedRow();
 //set th selected row into the txt fields
 try{
 textCandidateID.setText(model.getValueAt(selectedRow, 0).toString());
 textFirstName.setText(model.getValueAt(selectedRow, 1).toString());
 textLastName.setText(model.getValueAt(selectedRow, 2).toString());
 //getting Image and dislplayimg into Jlabel
 ImageIcon image1= (ImageIcon)jTable1.getValueAt(index, 3);
 Image image2 =image1.getImage().getScaledInstance(labelPicture.getWidth(), labelPicture.getHeight(), Image.SCALE_SMOOTH);
 ImageIcon image3= new  ImageIcon (image2);
 labelPicture.setIcon(image3);
 if(hold==1){
     
 
  jComboBox1.setSelectedIndex(1);
 }else if(hold==2){
 
  jComboBox1.setSelectedIndex(2);
 }else if(hold==3){
 
  jComboBox1.setSelectedIndex(3);
 }else if(hold==4){
 
  jComboBox1.setSelectedIndex(4);
 }else if(hold==5){
 
  jComboBox1.setSelectedIndex(5);
 }
 else if(hold==6){
 
  jComboBox1.setSelectedIndex(6);
 }
  else if(hold==7){
 
  jComboBox1.setSelectedIndex(7);
 }
 
 }catch(Exception e){
     JOptionPane.showMessageDialog(null, e.getMessage());
 
 }

          
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
 clear();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
 int index=jComboBox1.getSelectedIndex();
 int p = JOptionPane.showConfirmDialog(null, "Are you sure you want to update?","Update Record",JOptionPane.YES_NO_OPTION);
        if(p==0){
             if(index==0){
                 JOptionPane.showMessageDialog(null, "Choose Position");
             }
           else if(index==1){ 
            if(imagePath==null){
                
                 if(textCandidateID.getText()==null || textFirstName.getText()==null || textLastName.getText()==null){
                JOptionPane.showMessageDialog(null, "One or More Fields is empty");
            
            }else{
                     
                    

                try{

                    String sql= "update presidentcandidate set FIRSTNAME=?, LASTNAME=? where ID=?";

                    ps=con.prepareStatement(sql);

                    ps.setString(1, textFirstName.getText());
                    ps.setString(2, textLastName.getText());
                     ps.setString(3,textCandidateID.getText().trim());
  

                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Record Updated");
                    populateJTableforPresident();
                  clear();

                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                    clear();
                }
            }
            }else{
                
                    if(textCandidateID.getText()==null || textFirstName.getText()==null || textLastName.getText()==null){
                JOptionPane.showMessageDialog(null, "One or More Fields is empty");
            
            }else{
                        try{
                    
String sql= "update presidentcandidate set FIRSTNAME=?, LASTNAME=?,IMAGE=? where ID=?";
                    ps=con.prepareStatement(sql);   

                    ps.setString(1, textFirstName.getText());
                    ps.setString(2, textLastName.getText());
                    
                    InputStream img;
                    img = new FileInputStream(new File(imagePath));
                    ps.setBlob(3,img);
                   
                    ps.setString(4,textCandidateID.getText().trim());
                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Record Updated");
                    populateJTableforPresident();
                    clear();

                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                    clear();
                }
                }

            }
        }// End of Pres
            else if(index==2){ 
            if(imagePath==null){
                
                 if(textCandidateID.getText()==null || textFirstName.getText()==null || textLastName.getText()==null){
                JOptionPane.showMessageDialog(null, "One or More Fields is empty");
            
            }else{
                     
                    

                try{

                    String sql= "update financialcandidate set FIRSTNAME=?, LASTNAME=? where ID=?";

                    ps=con.prepareStatement(sql);

                    ps.setString(1, textFirstName.getText());
                    ps.setString(2, textLastName.getText());
                     ps.setString(3,textCandidateID.getText().trim());
  

                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Record Updated");
                    populateJTableFinancial();
                  clear();

                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                    clear();
                }
            }
            }else{
                
                    if(textCandidateID.getText()==null || textFirstName.getText()==null || textLastName.getText()==null){
                JOptionPane.showMessageDialog(null, "One or More Fields is empty");
            
            }else{
                        try{
                    
                  String sql= "update financialcandidate set FIRSTNAME=?, LASTNAME=?,IMAGE=? where ID=?";
                    ps=con.prepareStatement(sql);   

                    ps.setString(1, textFirstName.getText());
                    ps.setString(2, textLastName.getText());
                    
                    InputStream img;
                    img = new FileInputStream(new File(imagePath));
                    ps.setBlob(3,img);
                   
                    ps.setString(4,textCandidateID.getText().trim());
                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Record Updated");
                    populateJTableFinancial();
                    clear();

                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                    clear();
                }
                }

            }
        } //End Finance
            else if(index==3){ 
            if(imagePath==null){
                
                 if(textCandidateID.getText()==null || textFirstName.getText()==null || textLastName.getText()==null){
                JOptionPane.showMessageDialog(null, "One or More Fields is empty");
            
            }else{
                     
                    

                try{

                    String sql= "update secertarycandidate set FIRSTNAME=?, LASTNAME=? where ID=?";

                    ps=con.prepareStatement(sql);

                    ps.setString(1, textFirstName.getText());
                    ps.setString(2, textLastName.getText());
                     ps.setString(3,textCandidateID.getText().trim());
  

                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Record Updated");
                    populateJTableSecertary();
                  clear();

                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                    clear();
                }
            }
            }else{
                
                    if(textCandidateID.getText()==null || textFirstName.getText()==null || textLastName.getText()==null){
                JOptionPane.showMessageDialog(null, "One or More Fields is empty");
            
            }else{
                        try{
                    
String sql= "update secertarycandidate set FIRSTNAME=?, LASTNAME=?,IMAGE=? where ID=?";
                    ps=con.prepareStatement(sql);   

                    ps.setString(1, textFirstName.getText());
                    ps.setString(2, textLastName.getText());
                    
                    InputStream img;
                    img = new FileInputStream(new File(imagePath));
                    ps.setBlob(3,img);
                   
                    ps.setString(4,textCandidateID.getText().trim());
                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Record Updated");
                    populateJTableSecertary();
                    clear();

                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                    clear();
                }
                }

            }
        } //End of SEce
            else if(index==4){ 
            if(imagePath==null){
                
                 if(textCandidateID.getText()==null || textFirstName.getText()==null || textLastName.getText()==null){
                JOptionPane.showMessageDialog(null, "One or More Fields is empty");
            
            }else{
                     
                    

                try{

                    String sql= "update organizercandidate set FIRSTNAME=?, LASTNAME=? where ID=?";

                    ps=con.prepareStatement(sql);

                    ps.setString(1, textFirstName.getText());
                    ps.setString(2, textLastName.getText());
                     ps.setString(3,textCandidateID.getText().trim());
  

                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Record Updated");
                    populateJTableOrganizer();
                  clear();

                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                    clear();
                }
            }
            }else{
                
                    if(textCandidateID.getText()==null || textFirstName.getText()==null || textLastName.getText()==null){
                JOptionPane.showMessageDialog(null, "One or More Fields is empty");
            
            }else{
                        try{
                    
String sql= "update organizercandidate set FIRSTNAME=?, LASTNAME=?,IMAGE=? where ID=?";
                    ps=con.prepareStatement(sql);   

                    ps.setString(1, textFirstName.getText());
                    ps.setString(2, textLastName.getText());
                    
                    InputStream img;
                    img = new FileInputStream(new File(imagePath));
                    ps.setBlob(3,img);
                   
                    ps.setString(4,textCandidateID.getText().trim());
                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Record Updated");
                    populateJTableOrganizer();
                    clear();

                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                    clear();
                }
                }

            }
        }// End of Organa
            else if(index==5){ 
            if(imagePath==null){
                
                 if(textCandidateID.getText()==null || textFirstName.getText()==null || textLastName.getText()==null){
                JOptionPane.showMessageDialog(null, "One or More Fields is empty");
            
            }else{
                     
                    

                try{

                    String sql= "update wucomcandidate set FIRSTNAME=?, LASTNAME=? where ID=?";

                    ps=con.prepareStatement(sql);

                    ps.setString(1, textFirstName.getText());
                    ps.setString(2, textLastName.getText());
                     ps.setString(3,textCandidateID.getText().trim());
  

                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Record Updated");
                    populateJTableWucom();
                  clear();

                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                    clear();
                }
            }
            }else{
                
                    if(textCandidateID.getText()==null || textFirstName.getText()==null || textLastName.getText()==null){
                JOptionPane.showMessageDialog(null, "One or More Fields is empty");
            
            }else{
                        try{
                    
String sql= "update wucomcandidate set FIRSTNAME=?, LASTNAME=?,IMAGE=? where ID=?";
                    ps=con.prepareStatement(sql);   

                    ps.setString(1, textFirstName.getText());
                    ps.setString(2, textLastName.getText());
                    
                    InputStream img;
                    img = new FileInputStream(new File(imagePath));
                    ps.setBlob(3,img);
                   
                    ps.setString(4,textCandidateID.getText().trim());
                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Record Updated");
                    populateJTableWucom();
                    clear();

                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                    clear();
                }
                }

            }
        }//End Wucom
             else if(index==6){ 
            if(imagePath==null){
                
                 if(textCandidateID.getText()==null || textFirstName.getText()==null || textLastName.getText()==null){
                JOptionPane.showMessageDialog(null, "One or More Fields is empty");
            
            }else{
                     
                    

                try{

                    String sql= "update treasurecandidate set FIRSTNAME=?, LASTNAME=? where ID=?";

                    ps=con.prepareStatement(sql);

                    ps.setString(1, textFirstName.getText());
                    ps.setString(2, textLastName.getText());
                     ps.setString(3,textCandidateID.getText().trim());
  

                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Record Updated");
                    populateJTableTreasure();
                  clear();

                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                    clear();
                }
            }
            }else{
                
                    if(textCandidateID.getText()==null || textFirstName.getText()==null || textLastName.getText()==null){
                JOptionPane.showMessageDialog(null, "One or More Fields is empty");
            
            }else{
                        try{
                    
String sql= "update treasurecandidate set FIRSTNAME=?, LASTNAME=?,IMAGE=? where ID=?";
                    ps=con.prepareStatement(sql);   

                    ps.setString(1, textFirstName.getText());
                    ps.setString(2, textLastName.getText());
                    
                    InputStream img;
                    img = new FileInputStream(new File(imagePath));
                    ps.setBlob(3,img);
                   
                    ps.setString(4,textCandidateID.getText().trim());
                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Record Updated");
                    populateJTableTreasure();
                    clear();

                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                    clear();
                }
                }

            }
        }//End of Teasure
               else if(index==7){ 
            if(imagePath==null){
                
                 if(textCandidateID.getText()==null || textFirstName.getText()==null || textLastName.getText()==null){
                JOptionPane.showMessageDialog(null, "One or More Fields is empty");
            
            }else{
                     
                    

                try{

                    String sql= "update welfarecandidate set FIRSTNAME=?, LASTNAME=? where ID=?";

                    ps=con.prepareStatement(sql);

                    ps.setString(1, textFirstName.getText());
                    ps.setString(2, textLastName.getText());
                     ps.setString(3,textCandidateID.getText().trim());
  

                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Record Updated");
                    populateJTableforPresident();
                  clear();

                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                    clear();
                }
            }
            }else{
                
                    if(textCandidateID.getText()==null || textFirstName.getText()==null || textLastName.getText()==null){
                JOptionPane.showMessageDialog(null, "One or More Fields is empty");
            
            }else{
                        try{
                    
String sql= "update welfarecandidate set FIRSTNAME=?, LASTNAME=?,IMAGE=? where ID=?";
                    ps=con.prepareStatement(sql);   

                    ps.setString(1, textFirstName.getText());
                    ps.setString(2, textLastName.getText());
                    
                    InputStream img;
                    img = new FileInputStream(new File(imagePath));
                    ps.setBlob(3,img);
                   
                    ps.setString(4,textCandidateID.getText().trim());
                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Record Updated");
                    populateJTableforPresident();
                    clear();

                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                    clear();
                }
                }

            }
        }// End of Welfare
            
           
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        homePage a=new homePage();
        this.setVisible(false);
        a.show();
    }//GEN-LAST:event_btnBackActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
 setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(manageCandidate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(manageCandidate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(manageCandidate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(manageCandidate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new manageCandidate().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton buttonChoose;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel labelPicture;
    private javax.swing.JTextField textCandidateID;
    private javax.swing.JTextField textFirstName;
    private javax.swing.JTextField textLastName;
    // End of variables declaration//GEN-END:variables
void clear(){
    textCandidateID.setText("");
    textFirstName.setText("");
    textLastName.setText("");
    jComboBox1.setSelectedItem(null);
    labelPicture.setIcon(null);
    
    jComboBox2.setSelectedIndex(0);
    jTable1.removeAll();

}

public void populateJTableforPresident(){
    try{
    
   
MyQueryPresident mq = new MyQueryPresident();
ArrayList<NewClass> list = mq.BindTable();
String[] columnName = {"Id","firstname","lastname","image"};
Object[][] rows = new Object[list.size()][4];
for(int i = 0; i < list.size(); i++){
rows[i][0] = list.get(i).getID();
rows[i][1] = list.get(i).getFName();
rows[i][2] = list.get(i).getLName();
if(list.get(i).getMyImage() != null){
ImageIcon image = new ImageIcon(new ImageIcon(list.get(i).getMyImage()).getImage().getScaledInstance(150, 120, Image.SCALE_SMOOTH) );
rows[i][3] = image;
}
else{
rows[i][3] = null;
}
}
Images.TheModel model  = new Images.TheModel(rows, columnName);
jTable1.setModel(model);
jTable1.setRowHeight(120);
jTable1.getColumnModel().getColumn(3).setPreferredWidth(150);
jComboBox2.setSelectedIndex(1);
jComboBox1.setSelectedIndex(1);
}
    catch(Exception ex){
        JOptionPane.showMessageDialog(null, ex.getMessage());
    }
     }

public void populateJTableFinancial(){
    try{
    
   
MyQueryFinancial mq = new MyQueryFinancial();
ArrayList<NewClass> list = mq.BindTable();
String[] columnName = {"Id","firstname","lastname","image"};
Object[][] rows = new Object[list.size()][4];
for(int i = 0; i < list.size(); i++){
rows[i][0] = list.get(i).getID();
rows[i][1] = list.get(i).getFName();
rows[i][2] = list.get(i).getLName();
if(list.get(i).getMyImage() != null){
ImageIcon image = new ImageIcon(new ImageIcon(list.get(i).getMyImage()).getImage().getScaledInstance(150, 120, Image.SCALE_SMOOTH) );
rows[i][3] = image;
}
else{
rows[i][3] = null;
}
}
Images.TheModel model  = new Images.TheModel(rows, columnName);
jTable1.setModel(model);
jTable1.setRowHeight(120);
jTable1.getColumnModel().getColumn(3).setPreferredWidth(150);
jComboBox2.setSelectedIndex(2);
jComboBox1.setSelectedIndex(2);
}
    catch(Exception ex){
        JOptionPane.showMessageDialog(null, ex.getMessage());
    }
     }

public void populateJTableSecertary(){
    try{
    
   
MyQuerySecertary mq = new MyQuerySecertary();
ArrayList<NewClass> list = mq.BindTable();
String[] columnName = {"Id","firstname","lastname","image"};
Object[][] rows = new Object[list.size()][4];
for(int i = 0; i < list.size(); i++){
rows[i][0] = list.get(i).getID();
rows[i][1] = list.get(i).getFName();
rows[i][2] = list.get(i).getLName();
if(list.get(i).getMyImage() != null){
ImageIcon image = new ImageIcon(new ImageIcon(list.get(i).getMyImage()).getImage().getScaledInstance(150, 120, Image.SCALE_SMOOTH) );
rows[i][3] = image;
}
else{
rows[i][3] = null;
}
}
Images.TheModel model  = new Images.TheModel(rows, columnName);
jTable1.setModel(model);
jTable1.setRowHeight(120);
jTable1.getColumnModel().getColumn(3).setPreferredWidth(150);
jComboBox2.setSelectedIndex(3);
jComboBox1.setSelectedIndex(3);
}
    catch(Exception ex){
        JOptionPane.showMessageDialog(null, ex.getMessage());
    }
     }

public void populateJTableOrganizer(){
    try{
    
   
MyQueryOrganizer mq = new MyQueryOrganizer();
ArrayList<NewClass> list = mq.BindTable();
String[] columnName = {"Id","firstname","lastname","image"};
Object[][] rows = new Object[list.size()][4];
for(int i = 0; i < list.size(); i++){
rows[i][0] = list.get(i).getID();
rows[i][1] = list.get(i).getFName();
rows[i][2] = list.get(i).getLName();
if(list.get(i).getMyImage() != null){
ImageIcon image = new ImageIcon(new ImageIcon(list.get(i).getMyImage()).getImage().getScaledInstance(150, 120, Image.SCALE_SMOOTH) );
rows[i][3] = image;
}
else{
rows[i][3] = null;
}
}
Images.TheModel model  = new Images.TheModel(rows, columnName);
jTable1.setModel(model);
jTable1.setRowHeight(120);
jTable1.getColumnModel().getColumn(3).setPreferredWidth(150);
jComboBox2.setSelectedIndex(4);
jComboBox1.setSelectedIndex(4);
}
    catch(Exception ex){
        JOptionPane.showMessageDialog(null, ex.getMessage());
    }
     }

public void populateJTableWucom(){
    try{
    
   
MyQueryWucom mq = new MyQueryWucom();
ArrayList<NewClass> list = mq.BindTable();
String[] columnName = {"Id","firstname","lastname","image"};
Object[][] rows = new Object[list.size()][4];
for(int i = 0; i < list.size(); i++){
rows[i][0] = list.get(i).getID();
rows[i][1] = list.get(i).getFName();
rows[i][2] = list.get(i).getLName();
if(list.get(i).getMyImage() != null){
ImageIcon image = new ImageIcon(new ImageIcon(list.get(i).getMyImage()).getImage().getScaledInstance(150, 120, Image.SCALE_SMOOTH) );
rows[i][3] = image;
}
else{
rows[i][3] = null;
}
}
Images.TheModel model  = new Images.TheModel(rows, columnName);
jTable1.setModel(model);
jTable1.setRowHeight(120);
jTable1.getColumnModel().getColumn(3).setPreferredWidth(150);
jComboBox2.setSelectedIndex(5);
jComboBox1.setSelectedIndex(5);
}
    catch(Exception ex){
        JOptionPane.showMessageDialog(null, ex.getMessage());
    }
     }

public void populateJTableTreasure(){
    try{
    
   
MyQueryTreasure mq = new MyQueryTreasure();
ArrayList<NewClass> list = mq.BindTable();
String[] columnName = {"Id","firstname","lastname","image"};
Object[][] rows = new Object[list.size()][4];
for(int i = 0; i < list.size(); i++){
rows[i][0] = list.get(i).getID();
rows[i][1] = list.get(i).getFName();
rows[i][2] = list.get(i).getLName();
if(list.get(i).getMyImage() != null){
ImageIcon image = new ImageIcon(new ImageIcon(list.get(i).getMyImage()).getImage().getScaledInstance(150, 120, Image.SCALE_SMOOTH) );
rows[i][3] = image;
}
else{
rows[i][3] = null;
}
}
Images.TheModel model  = new Images.TheModel(rows, columnName);
jTable1.setModel(model);
jTable1.setRowHeight(120);
jTable1.getColumnModel().getColumn(3).setPreferredWidth(150);
jComboBox2.setSelectedIndex(6);
jComboBox1.setSelectedIndex(6);
}
    catch(Exception ex){
        JOptionPane.showMessageDialog(null, ex.getMessage());
    }
     }

public void populateJTableWelfare(){
    try{
    
   
MyQueryWelfare mq = new MyQueryWelfare();
ArrayList<NewClass> list = mq.BindTable();
String[] columnName = {"Id","firstname","lastname","image"};
Object[][] rows = new Object[list.size()][4];
for(int i = 0; i < list.size(); i++){
rows[i][0] = list.get(i).getID();
rows[i][1] = list.get(i).getFName();
rows[i][2] = list.get(i).getLName();
if(list.get(i).getMyImage() != null){
ImageIcon image = new ImageIcon(new ImageIcon(list.get(i).getMyImage()).getImage().getScaledInstance(150, 120, Image.SCALE_SMOOTH) );
rows[i][3] = image;
}
else{
rows[i][3] = null;
}
}
Images.TheModel model  = new Images.TheModel(rows, columnName);
jTable1.setModel(model);
jTable1.setRowHeight(120);
jTable1.getColumnModel().getColumn(3).setPreferredWidth(150);
jComboBox2.setSelectedIndex(7);
jComboBox1.setSelectedIndex(7);
}
    catch(Exception ex){
        JOptionPane.showMessageDialog(null, ex.getMessage());
    }
     }

}
